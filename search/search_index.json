{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning This site is not finished yet. See PR #370 for more information about its status. Until it is done, please see the current app README and linked there articles for the up to date app docs. is a specialized \"configuration as a code\" tool for GitLab projects, groups and more using hierarchical configuration written in YAML. Why? \u00b6 Short and powerful syntax. We provide a lot of features for your configurations (not programs!) thanks to the hierarchical configuration with inheritance, merging/overwriting and additivity . # configuration shared by all projects in this group... a_group/* : merge_requests : approvals : approvals_before_merge : 2 # ...except this project that has a different config: a_group/a_special_project : merge_requests : approvals : approvals_before_merge : 1 Dynamic features. GitLab has monthly releases, so it introduces new features that you can configure with API very often. GitLabForm can use them immediately because we use passing the parameters as-is to GitLab APIs with PUT/POST requests . a_group/a_project : project_settings : # ALL the keys described at # https://docs.gitlab.com/ee/api/projects.html#edit-project # can be provided here Stability. We treat our users the way we would like to be treated by other software projects maintainers: We follow semver and don't allow behavior changes in minor or patch versions. Before changing the syntax we start printing deprecation warnings in the versions before. We use versioning of the configuration syntax for major changes. Features \u00b6 GitLabForm enables you to manage: Group: Badges, Members (users) {add/remove user, change access level, optional enforce}, Members (groups) {share/unshare with group, change access level, optional enforce}, Members using LDAP Group Links ( GitLab Premium (paid) only ), CI/CD variables , Settings, Project: Archive/unarchive, Badges, CI/CD variables , Protected branches: access levels (roles) allowed to push/merge/unprotect, allow force push flag, users/groups allowed to push/merge/unprotect, code owner approval required flag ( GitLab Premium (paid) only ), Deploy keys , Files {add, edit or delete}, with templating based on Jinja2 (now supports custom variables!), Hooks, Members (users) {add/remove user, change access level, optional enforce}, Members (groups) {share/unshare with group, change access level, optional enforce}, Merge Requests approvals settings and approvers ( GitLab Premium (paid) only ), Pipeline schedules, Push Rules ( GitLab Premium (paid) only ), Integrations, Settings , Tags {protect/unprotect}, ...for: all projects in your GitLab instance/that you have access to, a group/subgroup of projects, a single project, ...and a combination of them. Used by \u00b6 ...and many more!","title":"Home"},{"location":"#why","text":"Short and powerful syntax. We provide a lot of features for your configurations (not programs!) thanks to the hierarchical configuration with inheritance, merging/overwriting and additivity . # configuration shared by all projects in this group... a_group/* : merge_requests : approvals : approvals_before_merge : 2 # ...except this project that has a different config: a_group/a_special_project : merge_requests : approvals : approvals_before_merge : 1 Dynamic features. GitLab has monthly releases, so it introduces new features that you can configure with API very often. GitLabForm can use them immediately because we use passing the parameters as-is to GitLab APIs with PUT/POST requests . a_group/a_project : project_settings : # ALL the keys described at # https://docs.gitlab.com/ee/api/projects.html#edit-project # can be provided here Stability. We treat our users the way we would like to be treated by other software projects maintainers: We follow semver and don't allow behavior changes in minor or patch versions. Before changing the syntax we start printing deprecation warnings in the versions before. We use versioning of the configuration syntax for major changes.","title":"Why?"},{"location":"#features","text":"GitLabForm enables you to manage: Group: Badges, Members (users) {add/remove user, change access level, optional enforce}, Members (groups) {share/unshare with group, change access level, optional enforce}, Members using LDAP Group Links ( GitLab Premium (paid) only ), CI/CD variables , Settings, Project: Archive/unarchive, Badges, CI/CD variables , Protected branches: access levels (roles) allowed to push/merge/unprotect, allow force push flag, users/groups allowed to push/merge/unprotect, code owner approval required flag ( GitLab Premium (paid) only ), Deploy keys , Files {add, edit or delete}, with templating based on Jinja2 (now supports custom variables!), Hooks, Members (users) {add/remove user, change access level, optional enforce}, Members (groups) {share/unshare with group, change access level, optional enforce}, Merge Requests approvals settings and approvers ( GitLab Premium (paid) only ), Pipeline schedules, Push Rules ( GitLab Premium (paid) only ), Integrations, Settings , Tags {protect/unprotect}, ...for: all projects in your GitLab instance/that you have access to, a group/subgroup of projects, a single project, ...and a combination of them.","title":"Features"},{"location":"#used-by","text":"...and many more!","title":"Used by"},{"location":"automation/","text":"Automation \u00b6 Running in an automated pipeline \u00b6 You can use GitLabForm as a part of your CCA (Continuous Configuration Automation) pipeline. You can run it with a schedule on ALL_DEFINED or ALL projects to unify your GitLab configuration, after it may have drifted from the configuration. For example you may allow the users to reconfigure projects during their working hours but automate cleaning up the drift each night. An example .gitlab-ci.yml for running GitLabForm using GitLab CI is provided here: image : ghcr.io/gdubicki/gitlabform:latest some_project : only : changes : - config.yml script : gitlabform my-group/subgroup/project my_whole_other_group : only : changes : - other-config.yml script : gitlabform -c other-config.yml my_whole_other_group Note that as a standard best practice you should not put your GitLab access token in your config.yml (unless it is encrypted) for security reasons - please set it in the GITLAB_TOKEN environment variable instead. For GitLab CI a secure place to set it would be a Protected Variable in the project configuration . Running automatically for new projects \u00b6 (* - Why do we provide a how-to only for the new projects and not groups? Because we assume that there is no big need to automate configuring new groups as if you add a config for a new group to GitLabForm, then it's hard to forget to actually run it...) Using system hooks \u00b6 Probably all the methods to achieve this will use GitLab system hooks feature which makes GitLab perform HTTP POST request on - among other ones - these events: project_create project_rename - we want this because after the rename project may get a new config from GitLabForm, project_transfer - we want this because under a new group the project may get a new config from GitLabForm, Method 1: GitLabForm on the same server as GitLab + adnanh/webhook app \u00b6 In this method we assume that: you have GitLabForm installed on the same server as your GitLab instance. its binary is here: /opt/gitlabform/venv/bin/gitlabform . its config is in /opt/gitlabform/conf - config.yml plus some files for the files: sections. Step 1: Configure GitLab system hooks \u00b6 Go to https://gitlab.your-company.com/admin/hooks and create a hook with the URL http://127.0.0.1:9000/hooks/run-gitlabform . Uncheck all the extra triggers as the events that are interesting for us are among the standard ones. Leave \"Enable SSL verification\" unchecked as we are making calls over loopback, there is no need to encrypt the traffic here. Step 2: Configure the webhook app to run GitLabForm \u00b6 Get and install the adnanh/webhook app. Create this pretty self-explaining config: --- - id : run-gitlabform execute-command : \"/opt/gitlabform/venv/bin/gitlabform\" command-working-directory : \"/opt/gitlabform/conf\" pass-arguments-to-command : - source : payload name : path_with_namespace trigger-rule : match : type : regex regex : \"(project_create|project_rename|project_transfer)\" parameter : source : payload name : event_name ...and save it as hooks.yaml . Run webhook app with: ./webhook -hooks path/to/your/hooks.yaml -ip 127 .0.0.1 -verbose ...and keep it running. (In the long term you should make this permanent with a systemd service/other way appropriate to your distro.) Step 3: Test \u00b6 Create a project with a config defined in your GitLabForm config and watch the output of webhook app. It should look like this: [webhook] 2021/01/25 19:24:56 incoming HTTP request from 127.0.0.1:56822 [webhook] 2021/01/25 19:24:56 run-gitlabform got matched [webhook] 2021/01/25 19:24:56 200 | 180.402\u00b5s | 127.0.0.1:5000 | POST /hooks/run-gitlabform [webhook] 2021/01/25 19:24:58 command output: *** # of groups to process: 0 *** # of projects to process: 1 * [1/1] Processing: your-group/your-project (...) GitLabForm version: 1.20.0 (the latest) [webhook] 2021/01/25 19:24:58 finished handling run-gitlabform - congrats! This means that it works! \ud83c\udf89","title":"Automation"},{"location":"automation/#automation","text":"","title":"Automation"},{"location":"automation/#running-in-an-automated-pipeline","text":"You can use GitLabForm as a part of your CCA (Continuous Configuration Automation) pipeline. You can run it with a schedule on ALL_DEFINED or ALL projects to unify your GitLab configuration, after it may have drifted from the configuration. For example you may allow the users to reconfigure projects during their working hours but automate cleaning up the drift each night. An example .gitlab-ci.yml for running GitLabForm using GitLab CI is provided here: image : ghcr.io/gdubicki/gitlabform:latest some_project : only : changes : - config.yml script : gitlabform my-group/subgroup/project my_whole_other_group : only : changes : - other-config.yml script : gitlabform -c other-config.yml my_whole_other_group Note that as a standard best practice you should not put your GitLab access token in your config.yml (unless it is encrypted) for security reasons - please set it in the GITLAB_TOKEN environment variable instead. For GitLab CI a secure place to set it would be a Protected Variable in the project configuration .","title":"Running in an automated pipeline"},{"location":"automation/#running-automatically-for-new-projects","text":"(* - Why do we provide a how-to only for the new projects and not groups? Because we assume that there is no big need to automate configuring new groups as if you add a config for a new group to GitLabForm, then it's hard to forget to actually run it...)","title":"Running automatically for new projects"},{"location":"automation/#using-system-hooks","text":"Probably all the methods to achieve this will use GitLab system hooks feature which makes GitLab perform HTTP POST request on - among other ones - these events: project_create project_rename - we want this because after the rename project may get a new config from GitLabForm, project_transfer - we want this because under a new group the project may get a new config from GitLabForm,","title":"Using system hooks"},{"location":"automation/#method-1-gitlabform-on-the-same-server-as-gitlab-adnanhwebhook-app","text":"In this method we assume that: you have GitLabForm installed on the same server as your GitLab instance. its binary is here: /opt/gitlabform/venv/bin/gitlabform . its config is in /opt/gitlabform/conf - config.yml plus some files for the files: sections.","title":"Method 1: GitLabForm on the same server as GitLab + adnanh/webhook app"},{"location":"automation/#step-1-configure-gitlab-system-hooks","text":"Go to https://gitlab.your-company.com/admin/hooks and create a hook with the URL http://127.0.0.1:9000/hooks/run-gitlabform . Uncheck all the extra triggers as the events that are interesting for us are among the standard ones. Leave \"Enable SSL verification\" unchecked as we are making calls over loopback, there is no need to encrypt the traffic here.","title":"Step 1: Configure GitLab system hooks"},{"location":"automation/#step-2-configure-the-webhook-app-to-run-gitlabform","text":"Get and install the adnanh/webhook app. Create this pretty self-explaining config: --- - id : run-gitlabform execute-command : \"/opt/gitlabform/venv/bin/gitlabform\" command-working-directory : \"/opt/gitlabform/conf\" pass-arguments-to-command : - source : payload name : path_with_namespace trigger-rule : match : type : regex regex : \"(project_create|project_rename|project_transfer)\" parameter : source : payload name : event_name ...and save it as hooks.yaml . Run webhook app with: ./webhook -hooks path/to/your/hooks.yaml -ip 127 .0.0.1 -verbose ...and keep it running. (In the long term you should make this permanent with a systemd service/other way appropriate to your distro.)","title":"Step 2: Configure the webhook app to run GitLabForm"},{"location":"automation/#step-3-test","text":"Create a project with a config defined in your GitLabForm config and watch the output of webhook app. It should look like this: [webhook] 2021/01/25 19:24:56 incoming HTTP request from 127.0.0.1:56822 [webhook] 2021/01/25 19:24:56 run-gitlabform got matched [webhook] 2021/01/25 19:24:56 200 | 180.402\u00b5s | 127.0.0.1:5000 | POST /hooks/run-gitlabform [webhook] 2021/01/25 19:24:58 command output: *** # of groups to process: 0 *** # of projects to process: 1 * [1/1] Processing: your-group/your-project (...) GitLabForm version: 1.20.0 (the latest) [webhook] 2021/01/25 19:24:58 finished handling run-gitlabform - congrats! This means that it works! \ud83c\udf89","title":"Step 3: Test"},{"location":"changelog/","text":"Changelog \u00b6 2.11.1 \u00b6 Fix another case of GitLab's Schedules API change/bug. Fixes #364 . 2.11.0 \u00b6 Allow breaking configuration inheritance . Implements #326 . PR #339 . Imagine you have a configuration like this: projects_and_groups : my-group/* : members : enforce : true groups : regular-developers : group_access : developer my-group/special-private-project : members : inherit : false # <--- the new keyword enforce : true groups : special-developers : group_access : developer users : john : access_level : maintainer With the new inherit: false entry used here, the effective members for my-group/special-private-project project are ONLY the special-developers grup and john user. Always expect pagination for GETs. Fixes #354 . PR #358 . Workaround for the GitLab's Schedules API change/bug. Fixes #361 . Big thanks to the Elastic Path team for their contribution of the above feature, especially @ep-linden for the whole implementation and @amimas for the initial proposal and cooperation on design! (There were 4 pre-releases of this version, 2.11.0b1-b4. b1 contained \"Allow breaking configuration inheritance\", b2 also #358 , b3 also a fix of a bug that caused breaking config inheritance to not work in some cases, b4 - #361 ). 2.10.1 \u00b6 Fix a problem causing some changes to not be applied. Fixes #334 . PR #350 . 2.10.0 \u00b6 Deleting deploy keys is now possible . This partially implements #193 . Also completely replace the implementation of deploy keys, secret variables and group secret variables with a new universal one. This possibly fixes #19 . Up to 40% faster thanks to making less requests to GitLab. (For almost 1000 repositories the apply time has dropped from ~18 minutes to ~11 minutes.) With debug enabled a lot less duplication and a more readable output of dicts (shown as JSONs). For Contributors Introduce SingleEntityProcessor that generalizes editing things that are single per project, f.e. settings or push rules set. It does not edit entities if there are not changes to be applied. Using it implementing new features can be superfast! (See also MultipleEntitiesProcessor added in v2.2.0). For Contributors Faster tests and improved usage of fixtures. (A pre-release of 2.9.2 RC1 contained some of the above changes. 2.10.0rc1 pre-release was the same as 2.10.0 final but with a slightly different changelog - the speed gains turned out to be higher than expected.) 2.9.1 \u00b6 Fix version 2.9.0 not even starting. \ud83e\udd26\u200d\u2642\ufe0f Add test to prevent this from happening again. 2.9.0 \u00b6 Access level names (not only their numbers) are now accepted in the configuration . More strictness in parsing configuration YAML and better error messages thanks to a switch to different libraries. F.e. hash keys overwriting is not accepted anymore. Moved the project from egnyte/gitlabform to gdubicki/gitlabform and switch to GitHub Registry as the new main Docker registry. 2.8.1 \u00b6 Don't show \"Warning: Using group_shared_with: is deprecated\" although the user is not really using this config syntax. 2.8.0 \u00b6 Complete support for managing groups and projects members : Add enforcing (direct) project members - groups and users, including being able to remove all direct members and keep only the members inherited from the group. Implements #100 . Unify the configuration syntax for group and project level membership. \u2728 New \u2728 config syntax example: projects_and_groups : foo/* : # below key now includes what used to be under # `group_shared_with` and `enforce_group_members` keys group_members : # there are only up to 3 direct keys below groups : another-group : # below key's name been changed to the name used in projects `members` # for groups (and the same as in the API to share group with group) group_access : 30 users : my-user : access_level : 50 # owner # this will enforce group-level users to be ONLY as defined above enforce : true # this will make the projects in `foo` group not contain any **direct** users or groups other # (so it will make it contain only the ones inherited from the group `foo`) members : enforce : true The \ud83c\udfda old and deprecated \ud83c\udfda syntax for a similar* config would be: projects_and_groups : foo/* : group_shared_with : groups : another-group : group_access_level : 30 group_members : my-user : access_level : 50 # owner enforce_group_members : true # !!! * - there was no enforce project members support before v2.8.0 !!! The old syntax works but will generate warnings. Support for it will be removed in one the future major GitLabForm versions. 2.7.1 \u00b6 Speed up running for ALL_DEFINED , when the defined groups and projects for just a small part of all the GitLab instance's groups and projects. Additionally always show the number of omitted groups and projects for any reasons (no config, archived, skipped). Fixes #285 . 2.7.0 \u00b6 Allow processing only requested configuration sections using a new cli argument -os / --only-sections . Minimize the number of unnecessary audit branch unprotect/protect events. Up to now every apply of the files section for protected branch resulted in unprotect and then (re)protect event for each protected branches and each file. Now this will only happen when the user running GitLabForm actually needs to do that, which should not happen often if you are using an admin account. Completely fixes #178 . 2.6.0 \u00b6 Complete support for Protected branches - access levels / users / groups allowed to push/merge/unprotect ( GitLab Premium (paid) only ). PR #289 . Add option to allow push force in protected branches . Implements #227 . Fix a bug causing the app to get HTTP 502 from GitLab when protecting branches in some cases. Fix getting members list to include usernames of all direct members not just the first page. PR #284 . Big thanks to the contributors of this release: @trissanen 2.5.0 \u00b6 Make commit messages for file operations configurable. Implements #278 . Thanks to @aleung for his contribution! 2.4.0 \u00b6 Add wildcard support for skip_groups and skip_projects . Implements #275 and #276 . Thanks to @chris-workingmouse for his contribution! 2.3.0 \u00b6 Add Protected branches - users allowed to push/merge ( GitLab Premium (paid) only ), PR #273 . For ALL_DEFINED also skip archived projects even if they are explicitly defined in the config, unless -a flag is added - for consistency. For Contributors Add docs for running the test themselves in a Docker container and for running GitLab in Docker using a license file, for testing paid-only features. Thanks to @florentio , @barryib and @Pigueiras for their contribution! 2.2.0 \u00b6 Add LDAP Group Links support ( GitLab Premium (paid) only ). Implements #140 . Add project and group badges support . Implements #59 . Allow 0 (no access) in Protected Tags. Fixes #172 . Exit on configuration missing projects_and_groups key. This will provide a helpful error message for typos made in this key. Fixes #242 . Make error messages more friendly when there is no network connection or when configuration is invalid (f.e. YAML parsing errors). Make the output of some processors a bit more consistent. Fix detecting an \"empty effective config\" and improve the UI related to processing groups and projects with such. Fixes #251 . Big refactoring that should make adding new features easier and faster. The main change is introducing a new way to implement \"processors\" - thanks to a generalized MultipleEntitiesProcessor class adding a new feature like Project Badges should is now as easy as implementing a class like BadgesProcessor and writing an acceptance test like TestBadges . Note that this new design may change in the near future and we are open to discussions and PRs to make it even better! We also plan to create a similar generalized SingleEntityProcessor class soon. Change the User Agent that the app uses when making requests to GitLab to a custom GitLabForm/<gitlabform_version> (python-requests/<requests_version>) . 2.1.2 \u00b6 Managing project members is not incredibly slow anymore. Fixes #240 Thanks to @andrewjw (Ocado Technology) for his contribution! 2.1.1 \u00b6 Fixed sharing group with a subgroup. Fixes #236 Improved re-protecting branches after updating files in them. Fail fast if the config is invalid. Better Docker images: Updated Alpine from 3.12 to 3.14, Started to build images in ARM64 architecture (apart from x86-64), Started to add tags , . . Note that Alpine-based image is the main one which gets these tags. For Debian-based images add \"-buster\" suffix. Implements #173 Thanks to @andrewjw (Ocado Technology) for his contribution! 2.1.0 \u00b6 Added a feature to share groups with other groups, with optional enforcing. Implements #150 Thanks to @andrewjw (Ocado Technology) for this contribution! 2.0.6 \u00b6 Fixed incorrect subgroups list when requesting to process ALL_DEFINED. Completes the fix for #221 2.0.5 \u00b6 Really fixed issue with unprotect_branch_new_api . Fixes #219 Fixed call to a Merge Requests Approvers API endpoint removed in GitLab 13.11.0. Fixes #220 Fixed potential security issue by enabling autoescaping when loading Jinja templates. (Bandit security tool issue B701 ) Thanks to @Pigueiras for his contribution! 2.0.4 \u00b6 Fixed issue with Push Rules when the project name contains a dot. Fixes #224 Fixed calling to process a single subgroup (like: gitlabform 'group/subgroup' ). Fixes #221 2.0.3 \u00b6 Fixed issue with dry-run for Project Push Rules when the current config is empty ( None ). Fixes #223 2.0.2 \u00b6 Fixed issue with unprotect_branch_new_api . Fixes #219 (update: later it turned out that it was not really fixed in 2.0.2 but in 2.0.5 instead) 2.0.1 \u00b6 Fixed issues with Jinja loader. Fixed calls to GitLab API that do not contain 'x-total-pages' header (gradually rolled out since GitLab MR #23931 ). Start showing deprecation warning when using the old branch protection API config syntax. Thanks to @mkjmdski for his contribution! (2.0.0post1-3 release is technically the same as 2.0.1 but was incorrectly versioned.) 2.0.0 \u00b6 (For a detailed info about changes in each RC of v2 please see the previous version of this changelog.) Make deep merging of configuration actually work (breaking change). Fixes #197 (RC5) Introduce config versioning (breaking change). ...or rather a change to avoid breakage. New major releases of GitLabForm starting with v2 will look for config_version key in the config file. If it doesn't exist, or the version does not match expected then the app will exit to avoid applying unexpected configuration and allowing the user to update the configuration. (RC1) New config syntax (breaking change). All 3 levels under a common key projects_and_groups . It should contain a dict, where common config is under a special \"*\" key, group configs under keys like group/* and project configs under keys like group/project . This will allow introducing pattern matching in these keys and introducing support for multiple config files in the future releases. Partially implements #138 . (RC1) Exit with code != 0 when any group/project processing was failed (breaking change). This will allow you to notice problems when running the app from CI. Note that you can restore the old behaviour by running the app with (...) || true . Also standardized exit codes. Exit with 1 in case of input error (f.e. config file does not exist), with 2 in case of processing error (f.e. GitLab returns HTTP 500).Fixes #153 . (RC1) Allow any case in groups and projects names (breaking change). GitLab groups and projects names are case sensitive but you cannot create such entities that differ only in the case. There is also a distinction between a \"name\" and a \"path\" and they may differ in case... To make work with this easier GitLabForm now accepts any case for them in both config files as well as when provided as command line arguments. We also disallow such entities that differ only in case (f.e. group/* and GROUP/* ) to avoid ambiguity. Fixes #160 . (RC2) Ignore archived projects by default (breaking change). This makes processing faster and output shorter. You can restore the previous behavior by adding --include-archived-projects / -a command line switch. Note that you have to do it if you want to unarchive archived projects! Fixes #157 in (arguably) a more convenient way. (RC2) Color output! Implements #141 . (RC1) Add diffing feature for secret variables. (with values shown as hashes to protect the secrets from leaking). (RC6) Added checking for invalid syntax in \"members\" section. Defining groups or users directly under this key instead of under sub-keys \"users\" and \"groups\" will now trigger an immediate error. (RC5) Add support for Python 3.9 (RC8) Added Windows support. Fixes #206 (RC5) Start processing at any group using the new command line switch - --start-from-group / -sfg . Similar to --start-from / -sf switch that can be used for projects. (RC1) Start releasing pre-releases as Docker images. They have tags with specific versions, but not \"latest\" tag as it is reserved for new final releases. Implements #201 (RC5) Prevent multiple email notifications from being sent when adding members to project. Fixes #101 (RC6) Prevent project's Audit Events being filled in with \"Added protected branch\". Fixes #178 (RC6) Fixed using \"expires_at\" for users. Fixes #207 (RC6) Remove the need to add the gitlab.api_version configuration key. (RC1) For Contributors Make writing tests easier and the tests more robust. Deduplicate a lot of the boilerplate code, allow putting configs into the test methods and use pytest fixtures for easier setup and cleanup. This should fix issues with tests reported in #190 . Also stop storing any dockerized GitLab data permanently to avoid problems like #196 and probably other related to failed dockerized GitLab upgrades. (RC3) For Contributors Rename \"integration tests\" to \"acceptance tests\". Because they ARE in fact acceptance tests. (RC3) Thanks to @amimas , @weakcamel , @kowpatryk , @ss7548 , @houres , @Pigueiras and @YuraBeznos for their contributions! before 2.0.0 \u00b6 Please see GitHub pre-2.0 releases' descriptions .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#2111","text":"Fix another case of GitLab's Schedules API change/bug. Fixes #364 .","title":"2.11.1"},{"location":"changelog/#2110","text":"Allow breaking configuration inheritance . Implements #326 . PR #339 . Imagine you have a configuration like this: projects_and_groups : my-group/* : members : enforce : true groups : regular-developers : group_access : developer my-group/special-private-project : members : inherit : false # <--- the new keyword enforce : true groups : special-developers : group_access : developer users : john : access_level : maintainer With the new inherit: false entry used here, the effective members for my-group/special-private-project project are ONLY the special-developers grup and john user. Always expect pagination for GETs. Fixes #354 . PR #358 . Workaround for the GitLab's Schedules API change/bug. Fixes #361 . Big thanks to the Elastic Path team for their contribution of the above feature, especially @ep-linden for the whole implementation and @amimas for the initial proposal and cooperation on design! (There were 4 pre-releases of this version, 2.11.0b1-b4. b1 contained \"Allow breaking configuration inheritance\", b2 also #358 , b3 also a fix of a bug that caused breaking config inheritance to not work in some cases, b4 - #361 ).","title":"2.11.0"},{"location":"changelog/#2101","text":"Fix a problem causing some changes to not be applied. Fixes #334 . PR #350 .","title":"2.10.1"},{"location":"changelog/#2100","text":"Deleting deploy keys is now possible . This partially implements #193 . Also completely replace the implementation of deploy keys, secret variables and group secret variables with a new universal one. This possibly fixes #19 . Up to 40% faster thanks to making less requests to GitLab. (For almost 1000 repositories the apply time has dropped from ~18 minutes to ~11 minutes.) With debug enabled a lot less duplication and a more readable output of dicts (shown as JSONs). For Contributors Introduce SingleEntityProcessor that generalizes editing things that are single per project, f.e. settings or push rules set. It does not edit entities if there are not changes to be applied. Using it implementing new features can be superfast! (See also MultipleEntitiesProcessor added in v2.2.0). For Contributors Faster tests and improved usage of fixtures. (A pre-release of 2.9.2 RC1 contained some of the above changes. 2.10.0rc1 pre-release was the same as 2.10.0 final but with a slightly different changelog - the speed gains turned out to be higher than expected.)","title":"2.10.0"},{"location":"changelog/#291","text":"Fix version 2.9.0 not even starting. \ud83e\udd26\u200d\u2642\ufe0f Add test to prevent this from happening again.","title":"2.9.1"},{"location":"changelog/#290","text":"Access level names (not only their numbers) are now accepted in the configuration . More strictness in parsing configuration YAML and better error messages thanks to a switch to different libraries. F.e. hash keys overwriting is not accepted anymore. Moved the project from egnyte/gitlabform to gdubicki/gitlabform and switch to GitHub Registry as the new main Docker registry.","title":"2.9.0"},{"location":"changelog/#281","text":"Don't show \"Warning: Using group_shared_with: is deprecated\" although the user is not really using this config syntax.","title":"2.8.1"},{"location":"changelog/#280","text":"Complete support for managing groups and projects members : Add enforcing (direct) project members - groups and users, including being able to remove all direct members and keep only the members inherited from the group. Implements #100 . Unify the configuration syntax for group and project level membership. \u2728 New \u2728 config syntax example: projects_and_groups : foo/* : # below key now includes what used to be under # `group_shared_with` and `enforce_group_members` keys group_members : # there are only up to 3 direct keys below groups : another-group : # below key's name been changed to the name used in projects `members` # for groups (and the same as in the API to share group with group) group_access : 30 users : my-user : access_level : 50 # owner # this will enforce group-level users to be ONLY as defined above enforce : true # this will make the projects in `foo` group not contain any **direct** users or groups other # (so it will make it contain only the ones inherited from the group `foo`) members : enforce : true The \ud83c\udfda old and deprecated \ud83c\udfda syntax for a similar* config would be: projects_and_groups : foo/* : group_shared_with : groups : another-group : group_access_level : 30 group_members : my-user : access_level : 50 # owner enforce_group_members : true # !!! * - there was no enforce project members support before v2.8.0 !!! The old syntax works but will generate warnings. Support for it will be removed in one the future major GitLabForm versions.","title":"2.8.0"},{"location":"changelog/#271","text":"Speed up running for ALL_DEFINED , when the defined groups and projects for just a small part of all the GitLab instance's groups and projects. Additionally always show the number of omitted groups and projects for any reasons (no config, archived, skipped). Fixes #285 .","title":"2.7.1"},{"location":"changelog/#270","text":"Allow processing only requested configuration sections using a new cli argument -os / --only-sections . Minimize the number of unnecessary audit branch unprotect/protect events. Up to now every apply of the files section for protected branch resulted in unprotect and then (re)protect event for each protected branches and each file. Now this will only happen when the user running GitLabForm actually needs to do that, which should not happen often if you are using an admin account. Completely fixes #178 .","title":"2.7.0"},{"location":"changelog/#260","text":"Complete support for Protected branches - access levels / users / groups allowed to push/merge/unprotect ( GitLab Premium (paid) only ). PR #289 . Add option to allow push force in protected branches . Implements #227 . Fix a bug causing the app to get HTTP 502 from GitLab when protecting branches in some cases. Fix getting members list to include usernames of all direct members not just the first page. PR #284 . Big thanks to the contributors of this release: @trissanen","title":"2.6.0"},{"location":"changelog/#250","text":"Make commit messages for file operations configurable. Implements #278 . Thanks to @aleung for his contribution!","title":"2.5.0"},{"location":"changelog/#240","text":"Add wildcard support for skip_groups and skip_projects . Implements #275 and #276 . Thanks to @chris-workingmouse for his contribution!","title":"2.4.0"},{"location":"changelog/#230","text":"Add Protected branches - users allowed to push/merge ( GitLab Premium (paid) only ), PR #273 . For ALL_DEFINED also skip archived projects even if they are explicitly defined in the config, unless -a flag is added - for consistency. For Contributors Add docs for running the test themselves in a Docker container and for running GitLab in Docker using a license file, for testing paid-only features. Thanks to @florentio , @barryib and @Pigueiras for their contribution!","title":"2.3.0"},{"location":"changelog/#220","text":"Add LDAP Group Links support ( GitLab Premium (paid) only ). Implements #140 . Add project and group badges support . Implements #59 . Allow 0 (no access) in Protected Tags. Fixes #172 . Exit on configuration missing projects_and_groups key. This will provide a helpful error message for typos made in this key. Fixes #242 . Make error messages more friendly when there is no network connection or when configuration is invalid (f.e. YAML parsing errors). Make the output of some processors a bit more consistent. Fix detecting an \"empty effective config\" and improve the UI related to processing groups and projects with such. Fixes #251 . Big refactoring that should make adding new features easier and faster. The main change is introducing a new way to implement \"processors\" - thanks to a generalized MultipleEntitiesProcessor class adding a new feature like Project Badges should is now as easy as implementing a class like BadgesProcessor and writing an acceptance test like TestBadges . Note that this new design may change in the near future and we are open to discussions and PRs to make it even better! We also plan to create a similar generalized SingleEntityProcessor class soon. Change the User Agent that the app uses when making requests to GitLab to a custom GitLabForm/<gitlabform_version> (python-requests/<requests_version>) .","title":"2.2.0"},{"location":"changelog/#212","text":"Managing project members is not incredibly slow anymore. Fixes #240 Thanks to @andrewjw (Ocado Technology) for his contribution!","title":"2.1.2"},{"location":"changelog/#211","text":"Fixed sharing group with a subgroup. Fixes #236 Improved re-protecting branches after updating files in them. Fail fast if the config is invalid. Better Docker images: Updated Alpine from 3.12 to 3.14, Started to build images in ARM64 architecture (apart from x86-64), Started to add tags , . . Note that Alpine-based image is the main one which gets these tags. For Debian-based images add \"-buster\" suffix. Implements #173 Thanks to @andrewjw (Ocado Technology) for his contribution!","title":"2.1.1"},{"location":"changelog/#210","text":"Added a feature to share groups with other groups, with optional enforcing. Implements #150 Thanks to @andrewjw (Ocado Technology) for this contribution!","title":"2.1.0"},{"location":"changelog/#206","text":"Fixed incorrect subgroups list when requesting to process ALL_DEFINED. Completes the fix for #221","title":"2.0.6"},{"location":"changelog/#205","text":"Really fixed issue with unprotect_branch_new_api . Fixes #219 Fixed call to a Merge Requests Approvers API endpoint removed in GitLab 13.11.0. Fixes #220 Fixed potential security issue by enabling autoescaping when loading Jinja templates. (Bandit security tool issue B701 ) Thanks to @Pigueiras for his contribution!","title":"2.0.5"},{"location":"changelog/#204","text":"Fixed issue with Push Rules when the project name contains a dot. Fixes #224 Fixed calling to process a single subgroup (like: gitlabform 'group/subgroup' ). Fixes #221","title":"2.0.4"},{"location":"changelog/#203","text":"Fixed issue with dry-run for Project Push Rules when the current config is empty ( None ). Fixes #223","title":"2.0.3"},{"location":"changelog/#202","text":"Fixed issue with unprotect_branch_new_api . Fixes #219 (update: later it turned out that it was not really fixed in 2.0.2 but in 2.0.5 instead)","title":"2.0.2"},{"location":"changelog/#201","text":"Fixed issues with Jinja loader. Fixed calls to GitLab API that do not contain 'x-total-pages' header (gradually rolled out since GitLab MR #23931 ). Start showing deprecation warning when using the old branch protection API config syntax. Thanks to @mkjmdski for his contribution! (2.0.0post1-3 release is technically the same as 2.0.1 but was incorrectly versioned.)","title":"2.0.1"},{"location":"changelog/#200","text":"(For a detailed info about changes in each RC of v2 please see the previous version of this changelog.) Make deep merging of configuration actually work (breaking change). Fixes #197 (RC5) Introduce config versioning (breaking change). ...or rather a change to avoid breakage. New major releases of GitLabForm starting with v2 will look for config_version key in the config file. If it doesn't exist, or the version does not match expected then the app will exit to avoid applying unexpected configuration and allowing the user to update the configuration. (RC1) New config syntax (breaking change). All 3 levels under a common key projects_and_groups . It should contain a dict, where common config is under a special \"*\" key, group configs under keys like group/* and project configs under keys like group/project . This will allow introducing pattern matching in these keys and introducing support for multiple config files in the future releases. Partially implements #138 . (RC1) Exit with code != 0 when any group/project processing was failed (breaking change). This will allow you to notice problems when running the app from CI. Note that you can restore the old behaviour by running the app with (...) || true . Also standardized exit codes. Exit with 1 in case of input error (f.e. config file does not exist), with 2 in case of processing error (f.e. GitLab returns HTTP 500).Fixes #153 . (RC1) Allow any case in groups and projects names (breaking change). GitLab groups and projects names are case sensitive but you cannot create such entities that differ only in the case. There is also a distinction between a \"name\" and a \"path\" and they may differ in case... To make work with this easier GitLabForm now accepts any case for them in both config files as well as when provided as command line arguments. We also disallow such entities that differ only in case (f.e. group/* and GROUP/* ) to avoid ambiguity. Fixes #160 . (RC2) Ignore archived projects by default (breaking change). This makes processing faster and output shorter. You can restore the previous behavior by adding --include-archived-projects / -a command line switch. Note that you have to do it if you want to unarchive archived projects! Fixes #157 in (arguably) a more convenient way. (RC2) Color output! Implements #141 . (RC1) Add diffing feature for secret variables. (with values shown as hashes to protect the secrets from leaking). (RC6) Added checking for invalid syntax in \"members\" section. Defining groups or users directly under this key instead of under sub-keys \"users\" and \"groups\" will now trigger an immediate error. (RC5) Add support for Python 3.9 (RC8) Added Windows support. Fixes #206 (RC5) Start processing at any group using the new command line switch - --start-from-group / -sfg . Similar to --start-from / -sf switch that can be used for projects. (RC1) Start releasing pre-releases as Docker images. They have tags with specific versions, but not \"latest\" tag as it is reserved for new final releases. Implements #201 (RC5) Prevent multiple email notifications from being sent when adding members to project. Fixes #101 (RC6) Prevent project's Audit Events being filled in with \"Added protected branch\". Fixes #178 (RC6) Fixed using \"expires_at\" for users. Fixes #207 (RC6) Remove the need to add the gitlab.api_version configuration key. (RC1) For Contributors Make writing tests easier and the tests more robust. Deduplicate a lot of the boilerplate code, allow putting configs into the test methods and use pytest fixtures for easier setup and cleanup. This should fix issues with tests reported in #190 . Also stop storing any dockerized GitLab data permanently to avoid problems like #196 and probably other related to failed dockerized GitLab upgrades. (RC3) For Contributors Rename \"integration tests\" to \"acceptance tests\". Because they ARE in fact acceptance tests. (RC3) Thanks to @amimas , @weakcamel , @kowpatryk , @ss7548 , @houres , @Pigueiras and @YuraBeznos for their contributions!","title":"2.0.0"},{"location":"changelog/#before-200","text":"Please see GitHub pre-2.0 releases' descriptions .","title":"before 2.0.0"},{"location":"configuration_reference/","text":"Syntax Reference \u00b6 The whole configuration for the app needs to be in a single YAML file of any name. Minimal example \u00b6 Here is a minimal working configuration file example: config_version : 2 gitlab : url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable token : \"<private token of an admin user>\" groups_and_project : \"*\" : project_settings : visibility : internal Mandatory keys \u00b6 The configuration has to contain the following keys: # This key is required in configs for GitLabForm version 2.x.x # This ensures that when the application behavior changes # you won't apply unexpected configuration to your GitLab instance. config_version : 2 # GitLab API access config gitlab : # alternatively use the GITLAB_URL environment variable for this url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable for this token : \"<private token OR an OAuth2 access token of an admin user>\" # ** optional parameters - below values are defaults ** # whether the SSL certificate of your GitLab instance should be verified, # set this to `false` if you are using a self-signed certificate (not recommended) ssl_verify : true # timeout for the whole requests to the GitLab API, in seconds timeout : 10 Optional keys \u00b6 The configuration can, but doesn't have to contain the following keys: # this will skip these projects from being processed skip_projects : - my-group/this-project-will-not-be-processed-with-gitlabform-when-running-for-my-group - my-group/and-this-too - my-group/everything-under/* # this will skip these groups from being processed skip_groups : - my-other-group - this-group-and-all-sub-groups/* Configuration levels \u00b6 In GitLabForm you define the configuration for your groups and projects under projects_and_groups: key, on 3 levels: Name Key syntax Description common \"*\" the configuration that will be applied to all projects and all groups group/subgroup group/* the configuration that will be applied to everything under a given group/subgroup, recursively (so the group/subgroup itself, all the projects in it, all the subgroups in it and all the projects in the subgroups in it) project group/project the configuration for specific single projects Each level is optional. Order does not matter. Example: projects_and_groups : \"*\" : # (...) group_1/* : # (...) group_1/project_1 : # (...) group_1/project_2 : # (...) group_1/project_3 : # (...) group_2/* : # (...) Configuration sections \u00b6 Under each of the keys described above, we put configuration to apply for given entities. These keys are called \"sections\" within this app. Some configuration sections apply to projects , some to groups . Syntax for each section is explained in detail on subpages - see links on the left. Effective configuration \u00b6 To generate the effective configuration to apply for a given project or group, if it is configured on more than one level (for example you run it for \"group_1/my_project\" with the example configuration above, where this project will take configuration from all 3 levels), GitLabForm will merge those configurations. Merging is additive , so for sections like deploy_keys , secret_variables , hooks on each lower level the effective configuration will contain elements from higher levels plus elements from lower levels. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : another_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg... title : group_key # this name is show in GitLab can_push : false For the above configuration, for a project group_1/project_1 the effective configuration will contain 2 keys, a_shared_key and another_key . Skipping sections \u00b6 If the only key under a section is skip: true then the given config section is not set AT ALL for a given entity. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : skip : true For the above configuration, for a project group_1/project_1 the effective configuration not manage the deploy keys at all. Breaking inheritance \u00b6 You can prevent inheriting configuration from the higher levels by placing inherit: false under a given section. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : inherit : false another_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg... title : group_key # this name is show in GitLab can_push : false For the above configuration, for a project group_1/project_1 the effective configuration will contain only 1 key - the another_key .","title":"Introduction"},{"location":"configuration_reference/#syntax-reference","text":"The whole configuration for the app needs to be in a single YAML file of any name.","title":"Syntax Reference"},{"location":"configuration_reference/#minimal-example","text":"Here is a minimal working configuration file example: config_version : 2 gitlab : url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable token : \"<private token of an admin user>\" groups_and_project : \"*\" : project_settings : visibility : internal","title":"Minimal example"},{"location":"configuration_reference/#mandatory-keys","text":"The configuration has to contain the following keys: # This key is required in configs for GitLabForm version 2.x.x # This ensures that when the application behavior changes # you won't apply unexpected configuration to your GitLab instance. config_version : 2 # GitLab API access config gitlab : # alternatively use the GITLAB_URL environment variable for this url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable for this token : \"<private token OR an OAuth2 access token of an admin user>\" # ** optional parameters - below values are defaults ** # whether the SSL certificate of your GitLab instance should be verified, # set this to `false` if you are using a self-signed certificate (not recommended) ssl_verify : true # timeout for the whole requests to the GitLab API, in seconds timeout : 10","title":"Mandatory keys"},{"location":"configuration_reference/#optional-keys","text":"The configuration can, but doesn't have to contain the following keys: # this will skip these projects from being processed skip_projects : - my-group/this-project-will-not-be-processed-with-gitlabform-when-running-for-my-group - my-group/and-this-too - my-group/everything-under/* # this will skip these groups from being processed skip_groups : - my-other-group - this-group-and-all-sub-groups/*","title":"Optional keys"},{"location":"configuration_reference/#configuration-levels","text":"In GitLabForm you define the configuration for your groups and projects under projects_and_groups: key, on 3 levels: Name Key syntax Description common \"*\" the configuration that will be applied to all projects and all groups group/subgroup group/* the configuration that will be applied to everything under a given group/subgroup, recursively (so the group/subgroup itself, all the projects in it, all the subgroups in it and all the projects in the subgroups in it) project group/project the configuration for specific single projects Each level is optional. Order does not matter. Example: projects_and_groups : \"*\" : # (...) group_1/* : # (...) group_1/project_1 : # (...) group_1/project_2 : # (...) group_1/project_3 : # (...) group_2/* : # (...)","title":"Configuration levels"},{"location":"configuration_reference/#configuration-sections","text":"Under each of the keys described above, we put configuration to apply for given entities. These keys are called \"sections\" within this app. Some configuration sections apply to projects , some to groups . Syntax for each section is explained in detail on subpages - see links on the left.","title":"Configuration sections"},{"location":"configuration_reference/#effective-configuration","text":"To generate the effective configuration to apply for a given project or group, if it is configured on more than one level (for example you run it for \"group_1/my_project\" with the example configuration above, where this project will take configuration from all 3 levels), GitLabForm will merge those configurations. Merging is additive , so for sections like deploy_keys , secret_variables , hooks on each lower level the effective configuration will contain elements from higher levels plus elements from lower levels. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : another_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg... title : group_key # this name is show in GitLab can_push : false For the above configuration, for a project group_1/project_1 the effective configuration will contain 2 keys, a_shared_key and another_key .","title":"Effective configuration"},{"location":"configuration_reference/#skipping-sections","text":"If the only key under a section is skip: true then the given config section is not set AT ALL for a given entity. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : skip : true For the above configuration, for a project group_1/project_1 the effective configuration not manage the deploy keys at all.","title":"Skipping sections"},{"location":"configuration_reference/#breaking-inheritance","text":"You can prevent inheriting configuration from the higher levels by placing inherit: false under a given section. Example: projects_and_groups : \"*\" : deploy_keys : a_shared_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL... title : global_key # this name is show in GitLab can_push : false group_1/* : deploy_keys : inherit : false another_key : key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg... title : group_key # this name is show in GitLab can_push : false For the above configuration, for a project group_1/project_1 the effective configuration will contain only 1 key - the another_key .","title":"Breaking inheritance"},{"location":"installation/","text":"Requirements and Installation \u00b6 Requirements \u00b6 Docker or Python 3.6-3.10 GitLab 11+ GitLab Premium (paid) for some features Installation \u00b6 Run the latest stable version with: Docker: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:latest gitlabform pipx : pipx run gitlabform Run the latest 2.* version with: Docker: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:2 gitlabform pipx : pipx run --spec 'gitlabform>=2,<3' gitlabform See this for all the available Docker tags. Install with: pipx (recommended): pipx install gitlabform plain pip : pip3 install gitlabform","title":"Requirements and Installation"},{"location":"installation/#requirements-and-installation","text":"","title":"Requirements and Installation"},{"location":"installation/#requirements","text":"Docker or Python 3.6-3.10 GitLab 11+ GitLab Premium (paid) for some features","title":"Requirements"},{"location":"installation/#installation","text":"Run the latest stable version with: Docker: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:latest gitlabform pipx : pipx run gitlabform Run the latest 2.* version with: Docker: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:2 gitlabform pipx : pipx run --spec 'gitlabform>=2,<3' gitlabform See this for all the available Docker tags. Install with: pipx (recommended): pipx install gitlabform plain pip : pip3 install gitlabform","title":"Installation"},{"location":"legal/","text":"Legal \u00b6 The app code is licensed under the MIT license. A few scripts in dev/ directory are licensed under the MPL 2.0 license. GitLab is a registered trademark of GitLab, Inc. This application is not endorsed by GitLab and is not affiliated with GitLab in any way. The GitLabForm logo is based on the GitLab logos available here , and like the original art is licensed under the Creative Commons Attribution Non-Commercial ShareAlike 4.0 International License . All the logos shown in the \"Home\" section of this documentation belong to their respective owners.","title":"Legal"},{"location":"legal/#legal","text":"The app code is licensed under the MIT license. A few scripts in dev/ directory are licensed under the MPL 2.0 license. GitLab is a registered trademark of GitLab, Inc. This application is not endorsed by GitLab and is not affiliated with GitLab in any way. The GitLabForm logo is based on the GitLab logos available here , and like the original art is licensed under the Creative Commons Attribution Non-Commercial ShareAlike 4.0 International License . All the logos shown in the \"Home\" section of this documentation belong to their respective owners.","title":"Legal"},{"location":"main_concepts/","text":"Main Concepts \u00b6 Hierarchical, merged and overridable configuration \u00b6 GitLabForm has been heavily inspired by Puppet's hiera . This is where we borrowed from the concept of a hierarchical configuration that is inherited from the higher to the lower levers while you also can override some config parts on the lower levels. Example 1 - configuration inheritance & overriding \u00b6 You want to configure all your GitLab instance projects to have JIRA integration enabled for your MRs to have ticket ids shown as links to JIRA in the web UI, but you DON'T want the integration that enables to close JIRA tickets from MRs that have \"closes \" in their description, so you do this: projects_and_groups : # common settings for ALL projects in ALL groups \"*\" : services : jira : url : https://jira.yourcompany.com commit_events : false merge_requests_events : true username : fake # this field is required by the GitLab API, but you can set it to any value password : fake # this field is required by the GitLab API, but you can set it to any value ...but you DO want this feature for a group of projects, but without comments about each commit added to JIRA, so then you add this to your config: # settings for ALL projects in 'some_group_name' group some_group_name/* : services : jira : username : real_username password : real_password jira_issue_transition_id : 123 ...and finally you realize that for a single project in that group you also DO WANT those comments (for example for compliance reasons), so you add: # settings for a single project some_group_name/specific_project_name : services : jira : commit_events : true Note how you don't have to provide a full config each time - only the parts that are changing. This is because the configs from the higher level are being merged with the ones on the lower. Example 2 - adding elements \u00b6 You want to add a default README file to all your projects that contains a convenience link to search for given project in Confluence. So you add this to your config: projects_and_groups : \"*\" : files : \"README.md\" : overwrite : false # do not overwrite if someone already added a real README only_first_branch : true # add the file only to the first branch in the below list branches : - develop - main skip_ci : true # this will prevent the commit that applies this file change triggering CI build content : | This is a default project README. Please replace it with a proper one! Search for this project in Confluence with this [link](https://confluence.yourcompany.com/dosearchsite.action?cql=siteSearch%20~%20%22{{ project }}%22&includeArchivedSpaces=false). Then you realize that for \"app_1\" group projects you also want to add a default .gitignore file, so you add this to your config: app_1/* : files : \".gitignore\" : overwrite : false only_first_branch : true branches : - develop - main skip_ci : true content : | *.swp *.bak Note that the projects in the group \"app_1\" will have BOTH files added - README.md and .gitignore . This is because the configs are additive for most \"listed\" elements. (Note that you can disable additivity selectively by using skip: true configuration expression, like this: app_1/some_repo : files : \".gitignore\" : skip : true # thanks to this `app_1/some_repo` will NOT get `.gitignore` file from GitLabForm ) Raw parameters passing \u00b6 Since 2017, when GitLabForm was originally developed, GitLab development pace is so fast that we are not able to keep up with it by updating GitLabForm whenever a parameter is added or changed in the GitLab's API. Because of that we made a decision to use \"raw parameters passing\" - for many configuration elements whatever you put inside it as a dict, will be sent with a PUT/POST request into the appropriate GitLab API as-is. The advantage of this approach is that you can use each of the +40 parameters from the GitLab API for Projects to configure your project with GitLabForm and when GitLab adds a new parameter there you can start using it on the day you update your GitLab instance, without waiting for GitLabForm to be updated to support it. Similarly for the Group settings, using +20 parameters from the GitLab API for Groups . And if your GitLabForm run fails because one of the fields you are using has been removed, then you know that you have to update your config. The disadvantage is that you HAVE TO read the GitLab API docs when you create your initial config for some entities, like Projects or Groups.","title":"Main Concepts"},{"location":"main_concepts/#main-concepts","text":"","title":"Main Concepts"},{"location":"main_concepts/#hierarchical-merged-and-overridable-configuration","text":"GitLabForm has been heavily inspired by Puppet's hiera . This is where we borrowed from the concept of a hierarchical configuration that is inherited from the higher to the lower levers while you also can override some config parts on the lower levels.","title":"Hierarchical, merged and overridable configuration"},{"location":"main_concepts/#example-1-configuration-inheritance-overriding","text":"You want to configure all your GitLab instance projects to have JIRA integration enabled for your MRs to have ticket ids shown as links to JIRA in the web UI, but you DON'T want the integration that enables to close JIRA tickets from MRs that have \"closes \" in their description, so you do this: projects_and_groups : # common settings for ALL projects in ALL groups \"*\" : services : jira : url : https://jira.yourcompany.com commit_events : false merge_requests_events : true username : fake # this field is required by the GitLab API, but you can set it to any value password : fake # this field is required by the GitLab API, but you can set it to any value ...but you DO want this feature for a group of projects, but without comments about each commit added to JIRA, so then you add this to your config: # settings for ALL projects in 'some_group_name' group some_group_name/* : services : jira : username : real_username password : real_password jira_issue_transition_id : 123 ...and finally you realize that for a single project in that group you also DO WANT those comments (for example for compliance reasons), so you add: # settings for a single project some_group_name/specific_project_name : services : jira : commit_events : true Note how you don't have to provide a full config each time - only the parts that are changing. This is because the configs from the higher level are being merged with the ones on the lower.","title":"Example 1 - configuration inheritance &amp; overriding"},{"location":"main_concepts/#example-2-adding-elements","text":"You want to add a default README file to all your projects that contains a convenience link to search for given project in Confluence. So you add this to your config: projects_and_groups : \"*\" : files : \"README.md\" : overwrite : false # do not overwrite if someone already added a real README only_first_branch : true # add the file only to the first branch in the below list branches : - develop - main skip_ci : true # this will prevent the commit that applies this file change triggering CI build content : | This is a default project README. Please replace it with a proper one! Search for this project in Confluence with this [link](https://confluence.yourcompany.com/dosearchsite.action?cql=siteSearch%20~%20%22{{ project }}%22&includeArchivedSpaces=false). Then you realize that for \"app_1\" group projects you also want to add a default .gitignore file, so you add this to your config: app_1/* : files : \".gitignore\" : overwrite : false only_first_branch : true branches : - develop - main skip_ci : true content : | *.swp *.bak Note that the projects in the group \"app_1\" will have BOTH files added - README.md and .gitignore . This is because the configs are additive for most \"listed\" elements. (Note that you can disable additivity selectively by using skip: true configuration expression, like this: app_1/some_repo : files : \".gitignore\" : skip : true # thanks to this `app_1/some_repo` will NOT get `.gitignore` file from GitLabForm )","title":"Example 2 - adding elements"},{"location":"main_concepts/#raw-parameters-passing","text":"Since 2017, when GitLabForm was originally developed, GitLab development pace is so fast that we are not able to keep up with it by updating GitLabForm whenever a parameter is added or changed in the GitLab's API. Because of that we made a decision to use \"raw parameters passing\" - for many configuration elements whatever you put inside it as a dict, will be sent with a PUT/POST request into the appropriate GitLab API as-is. The advantage of this approach is that you can use each of the +40 parameters from the GitLab API for Projects to configure your project with GitLabForm and when GitLab adds a new parameter there you can start using it on the day you update your GitLab instance, without waiting for GitLabForm to be updated to support it. Similarly for the Group settings, using +20 parameters from the GitLab API for Groups . And if your GitLabForm run fails because one of the fields you are using has been removed, then you know that you have to update your config. The disadvantage is that you HAVE TO read the GitLab API docs when you create your initial config for some entities, like Projects or Groups.","title":"Raw parameters passing"},{"location":"quick_start/","text":"Quick Start \u00b6 Let's assume that you want to add a deployment key to all projects in a group \"My Group\" (with path \"my-group\"). If so then: Create example config.yml : config_version : 2 gitlab : url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable for this token : \"<private token OR an OAuth2 access token of an admin user>\" projects_and_groups : my-group/* : deploy_keys : a_friendly_deploy_key_name : # this name is only used in GitLabForm config key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3WiHAsm2UTz2dU1vKFYUGfHI1p5fIv84BbtV/9jAKvZhVHDqMa07PgVtkttjvDC8bA1kezhOBKcO0KNzVoDp0ENq7WLxFyLFMQ9USf8LmOY70uV/l8Gpcn1ZT7zRBdEzUUgF/PjZukqVtuHqf9TCO8Ekvjag9XRfVNadKs25rbL60oqpIpEUqAbmQ4j6GFcfBBBPuVlKfidI6O039dAnDUsmeafwCOhEvQmF+N5Diauw3Mk+9TMKNlOWM+pO2DKxX9LLLWGVA9Dqr6dWY0eHjWKUmk2B1h1HYW+aUyoWX2TGsVX9DlNY7CKiQGsL5MRH9IXKMQ8cfMweKoEcwSSXJ title : ssh_key_name_that_is_shown_in_gitlab can_push : false 2. Run: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:latest gitlabform my-group 3. Watch GitLabForm add this deploy key to all projects in \"My Group\" group in your GitLab!","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Let's assume that you want to add a deployment key to all projects in a group \"My Group\" (with path \"my-group\"). If so then: Create example config.yml : config_version : 2 gitlab : url : https://gitlab.yourcompany.com # alternatively use the GITLAB_TOKEN environment variable for this token : \"<private token OR an OAuth2 access token of an admin user>\" projects_and_groups : my-group/* : deploy_keys : a_friendly_deploy_key_name : # this name is only used in GitLabForm config key : ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3WiHAsm2UTz2dU1vKFYUGfHI1p5fIv84BbtV/9jAKvZhVHDqMa07PgVtkttjvDC8bA1kezhOBKcO0KNzVoDp0ENq7WLxFyLFMQ9USf8LmOY70uV/l8Gpcn1ZT7zRBdEzUUgF/PjZukqVtuHqf9TCO8Ekvjag9XRfVNadKs25rbL60oqpIpEUqAbmQ4j6GFcfBBBPuVlKfidI6O039dAnDUsmeafwCOhEvQmF+N5Diauw3Mk+9TMKNlOWM+pO2DKxX9LLLWGVA9Dqr6dWY0eHjWKUmk2B1h1HYW+aUyoWX2TGsVX9DlNY7CKiQGsL5MRH9IXKMQ8cfMweKoEcwSSXJ title : ssh_key_name_that_is_shown_in_gitlab can_push : false 2. Run: docker run -it -v $( pwd ) :/config ghcr.io/gdubicki/gitlabform:latest gitlabform my-group 3. Watch GitLabForm add this deploy key to all projects in \"My Group\" group in your GitLab!","title":"Quick Start"},{"location":"running/","text":"Running \u00b6 To apply settings for a single project, run: gitlabform my-group/my-project1 To apply settings for a group of projects, run: gitlabform my-group To apply settings for all groups of projects and projects explicitly defined in the config, run: gitlabform ALL_DEFINED To apply settings for all projects, run: gitlabform ALL Run: gitlabform -h ...to see the current set of supported command line parameters.","title":"Running"},{"location":"running/#running","text":"To apply settings for a single project, run: gitlabform my-group/my-project1 To apply settings for a group of projects, run: gitlabform my-group To apply settings for all groups of projects and projects explicitly defined in the config, run: gitlabform ALL_DEFINED To apply settings for all projects, run: gitlabform ALL Run: gitlabform -h ...to see the current set of supported command line parameters.","title":"Running"},{"location":"similar_apps/","text":"Similar apps \u00b6 GitLab provider for Terraform \u00b6 Terraform , the almost universal \"* as a code\" tool from Hashicorp, which inspired this app (hence the name!), has a provider for configuring GitLab using the Hashicorp Configuration Language (HCL). It is an older and more mature solution than GitLabForm, using a de-facto standard configuration language, but it's also more generic. GitLabForm has been built specifically for managing GitLab and has been designed around different concepts that provide a different set of features, arguably a more powerful one. Key differences \u00b6 ...between GitLab provider for Terraform (\" GT \") and GitLabForm (\" GLF \"): GT allows creating resources such as users, groups and projects while GLF (as of now) allows only configuring existing entities (with an exception for management of files in the repo, which is a unique GLF feature), GT can only manage specific groups and projects. GLF allows configuring everything it supports for ALL of your projects in your GitLab instance (with the possibility to provide more specialized configuration for some of the groups and projects). GT is using a structured language which describes each managed resource explicitly (with iterators, of course) while GLF is based on YAML and a concept of hierarchical, inheritable configuration with merging/overwriting and addivity. Therefore only with GLF you can write configs like \"For all projects in group X do this, but for specific projects X/A and X/B in it also do this and for X/C do something a bit different\". GT wraps the GitLab API into abstractions while GLF in many cases (explained in the docs) makes PUT/POST requests of the dicts found in the config as-is to the GitLab API. GT approach is more convenient and less \"raw\" (you read GT docs when using it, while for GLF you also have to read GitLab API docs) but GLF allows you to use all of the GitLab API features - GT supports only a fraction of GitLab's API parameters for editing group and project while GLF by design allows you to use all of them. Also when you update your GitLab instance you can start using new API features immediately with GLF while with GT you have to wait until its new version supporting those features is released. You can read more about the last two points in the GitLabForm key features design article here . Feature matrix/comparison sheet \u00b6 For your convenience we have prepared GitLab provider for Terraform vs GitLabForm feature matrix / comparion sheet . Note: this sheet MAY contain errors and WILL get outdated. Please report these issues in it using comments. Thank you! GitLab Configuration as Code (GCasC) \u00b6 To configure your GitLab instance itself (appearance, application settings, features, license) please check out the GitLab Configuration as Code (GCasC) project!","title":"Similar Apps"},{"location":"similar_apps/#similar-apps","text":"","title":"Similar apps"},{"location":"similar_apps/#gitlab-provider-for-terraform","text":"Terraform , the almost universal \"* as a code\" tool from Hashicorp, which inspired this app (hence the name!), has a provider for configuring GitLab using the Hashicorp Configuration Language (HCL). It is an older and more mature solution than GitLabForm, using a de-facto standard configuration language, but it's also more generic. GitLabForm has been built specifically for managing GitLab and has been designed around different concepts that provide a different set of features, arguably a more powerful one.","title":"GitLab provider for Terraform"},{"location":"similar_apps/#key-differences","text":"...between GitLab provider for Terraform (\" GT \") and GitLabForm (\" GLF \"): GT allows creating resources such as users, groups and projects while GLF (as of now) allows only configuring existing entities (with an exception for management of files in the repo, which is a unique GLF feature), GT can only manage specific groups and projects. GLF allows configuring everything it supports for ALL of your projects in your GitLab instance (with the possibility to provide more specialized configuration for some of the groups and projects). GT is using a structured language which describes each managed resource explicitly (with iterators, of course) while GLF is based on YAML and a concept of hierarchical, inheritable configuration with merging/overwriting and addivity. Therefore only with GLF you can write configs like \"For all projects in group X do this, but for specific projects X/A and X/B in it also do this and for X/C do something a bit different\". GT wraps the GitLab API into abstractions while GLF in many cases (explained in the docs) makes PUT/POST requests of the dicts found in the config as-is to the GitLab API. GT approach is more convenient and less \"raw\" (you read GT docs when using it, while for GLF you also have to read GitLab API docs) but GLF allows you to use all of the GitLab API features - GT supports only a fraction of GitLab's API parameters for editing group and project while GLF by design allows you to use all of them. Also when you update your GitLab instance you can start using new API features immediately with GLF while with GT you have to wait until its new version supporting those features is released. You can read more about the last two points in the GitLabForm key features design article here .","title":"Key differences"},{"location":"similar_apps/#feature-matrixcomparison-sheet","text":"For your convenience we have prepared GitLab provider for Terraform vs GitLabForm feature matrix / comparion sheet . Note: this sheet MAY contain errors and WILL get outdated. Please report these issues in it using comments. Thank you!","title":"Feature matrix/comparison sheet"},{"location":"similar_apps/#gitlab-configuration-as-code-gcasc","text":"To configure your GitLab instance itself (appearance, application settings, features, license) please check out the GitLab Configuration as Code (GCasC) project!","title":"GitLab Configuration as Code (GCasC)"},{"location":"contrib/coding_guidelines/","text":"General coding guidelines \u00b6 Please do: use the common sense, add tests along with the new code that prove that it works: in case of non-trivial logic add/change please add unit tests, for all bug fixes and new features using GitLab API please add acceptance tests use Black code formatter: black . We recommend and provide a config for pre-commit to generate a pre-commit hook that will automatically reformat your contributions with Black. squash your commits (unless there is a reason not to), try to write good commit message(s) , ...and so on. Additionally, please follow these GitLabForm-specific guidelines: do not uptick version file in your PR - you will quickly have to resolve conflicts if you do that as we release more often than the usual baking time of a PR... We are open to refactoring but in case of bigger efforts we suggest creating an issue first and discussing what you propose to do before doing it.","title":"Coding Guidelines"},{"location":"contrib/coding_guidelines/#general-coding-guidelines","text":"Please do: use the common sense, add tests along with the new code that prove that it works: in case of non-trivial logic add/change please add unit tests, for all bug fixes and new features using GitLab API please add acceptance tests use Black code formatter: black . We recommend and provide a config for pre-commit to generate a pre-commit hook that will automatically reformat your contributions with Black. squash your commits (unless there is a reason not to), try to write good commit message(s) , ...and so on. Additionally, please follow these GitLabForm-specific guidelines: do not uptick version file in your PR - you will quickly have to resolve conflicts if you do that as we release more often than the usual baking time of a PR... We are open to refactoring but in case of bigger efforts we suggest creating an issue first and discussing what you propose to do before doing it.","title":"General coding guidelines"},{"location":"contrib/implementation_design/","text":"Implementation design \u00b6 If you haven't done this before, please read the main concepts article first. It explains the \"why\"s of the two key design concepts of this app: * hierarchical configuration with inheritance, merging/overwriting and additivity, * raw parameters passing Please also read the general coding guidelines for the basics of how to create PRs, the expected style of your code etc. - the \"general how\"s. This article purpose is to explain \"specific how\"s - explain what is where in the code and how to add features by example. Project Structure \u00b6 Packages \u00b6 gitlabform.* and gitlabform.processors.* - contains the main app logic. It provides the CLI, parsing of the parameters, uses below two packages to apply the config defined in config.yml to the requested set of projects. gitlabform.gitlab.* - contains the GitLab API client code, grouped mostly by the GitLab API as documented at docs.gitlab.com . gitlabform.configuration.* - contains the logic for reading the config from YAML file or a string (the latter is only for testing) and getting an effective config per GitLab project by merging the config on these levels: common, group and project settings. Common pattern - multiple inheritance \u00b6 In many of the above packages we are using multiple inheritance . The basic features are implemented in the \"core\" class defined in core.py . Extensions to it are defined in all other files as \"feature\" classes that inherit the \"core\". Finally, there is an \"everything\" class that groups them all - it is defined in the __init__.py file. gitlabform. and gitlabform.processors. \u00b6 The entry point for running the app is in run.py and the main logic is in the GitLabForm class. This code boils down to the run() method, which for each project that according to the app parameters and config should be taken into account, applies the effective config. The effective config contains what is called the \"config sections\", which are the YAML keys that can exist under projects in the config YAML, for example: deploy_keys , secret_variables , group_secret_variables and so on. Those config sections are processed by the code in the classes inheriting from the AbstractProcessor class. This class should be reused when implementing new functionalities (such as supporting new configuration keys) as it holds the common logic for skipping the configuration parts and running in dry-run mode. The processors have been grouped into two packages - group where the processors applied to the group settings are implemented and project - where processors executed on the project level are located. Since v2.2.0 there is a new way of implementing processors - by inheriting form MultipleEntitiesProcessor class. It should be applied for new features which manage 0-N entities of some kind under a group or a project. See BadgesProcessor as an example how to use it. Since v2.10.0 we have a similar solution for features where you manage a single entity - SingleEntityProcessor class. See ProjectPushRulesProcessor as an example how to use it. Usage \u00b6 If you want to add/change/fix things under an existing config section then most likely you will need to update the code in the processor classes (for example, in BranchesProcessor ). If you want to add support for a new config section (= completely new feature), then you need to: (TODO: expand this sections) Consider writing a new processor using MultipleEntitiesProcessor class as a base. Create a new class group_<new_config_section_name>_processor (if it applies to the group settings) or <new_config_section_name>_processor (if it applies to project settings) and implement two methods: _process_configuration - which does the actual processing by calling the API and applying the changes in GitLab; _log_changes - which is optional but recommended to implement; by calling this method the effective changes to be applied should be logged (when running in dry-run mode). Add the new processor to GroupProcessors in group > __init__.py (if group settings processor was created) or to ProjectProcessors in project > __init__.py . gitlabform.gitlab.* \u00b6 With the basics for making requests to the GitLab API covered in the GitLabCore class in core.py , all other code is simple (most of the time). Almost all methods in other classes end up calling self._make_requests_to_api , which takes care of making the HTTP GitLab API requests with proper authentication, pagination, retries, timeouts and more. Sometimes there is some logic in these methods if: we only need a specific part of the response from GitLab API - see GitLabProjects.get_all_projects() as an example, some GitLab APIs need some workarounds for their bugs or documentation inconsistencies, like: some APIs declare in the docs that they accept both \"group/project\" string OR a project id while in fact only the latter works - see GitLabProjects.post_approvals() as an example, some APIs return invalid HTTP error codes, like 404 instead of 400 - see GitLabGroupLDAPLinks.add_ldap_group_link as an example. Note : Some of the code here is NOT used by the GitLabForm app , but utilized by internal Egnyte applications that have not yet switched to the more standard python-gitlab . Usage \u00b6 If you want to add/change/fix code that operates on an existing GitLab API you should look around the \"feature\" classes in this package (for example GitLabMergeRequests in merge_requests.py ). If you want to add code that operates on the new GitLab API you should: create a new new_gitlab_api_name.py file in gitlabform.gitlab and define a \"feature\" class there that inherits GitLabCore (for example: GitLabApiName ). add the new feature class to the list of classes inherited by the \"everything\" GitLab class defined in __init__.py . gitlabform.configuration.* \u00b6 TODO : describe this part. Especially what an \"effective project config\" is, because that may not be clear.","title":"Implementation Design"},{"location":"contrib/implementation_design/#implementation-design","text":"If you haven't done this before, please read the main concepts article first. It explains the \"why\"s of the two key design concepts of this app: * hierarchical configuration with inheritance, merging/overwriting and additivity, * raw parameters passing Please also read the general coding guidelines for the basics of how to create PRs, the expected style of your code etc. - the \"general how\"s. This article purpose is to explain \"specific how\"s - explain what is where in the code and how to add features by example.","title":"Implementation design"},{"location":"contrib/implementation_design/#project-structure","text":"","title":"Project Structure"},{"location":"contrib/implementation_design/#packages","text":"gitlabform.* and gitlabform.processors.* - contains the main app logic. It provides the CLI, parsing of the parameters, uses below two packages to apply the config defined in config.yml to the requested set of projects. gitlabform.gitlab.* - contains the GitLab API client code, grouped mostly by the GitLab API as documented at docs.gitlab.com . gitlabform.configuration.* - contains the logic for reading the config from YAML file or a string (the latter is only for testing) and getting an effective config per GitLab project by merging the config on these levels: common, group and project settings.","title":"Packages"},{"location":"contrib/implementation_design/#common-pattern-multiple-inheritance","text":"In many of the above packages we are using multiple inheritance . The basic features are implemented in the \"core\" class defined in core.py . Extensions to it are defined in all other files as \"feature\" classes that inherit the \"core\". Finally, there is an \"everything\" class that groups them all - it is defined in the __init__.py file.","title":"Common pattern - multiple inheritance"},{"location":"contrib/implementation_design/#gitlabform-and-gitlabformprocessors","text":"The entry point for running the app is in run.py and the main logic is in the GitLabForm class. This code boils down to the run() method, which for each project that according to the app parameters and config should be taken into account, applies the effective config. The effective config contains what is called the \"config sections\", which are the YAML keys that can exist under projects in the config YAML, for example: deploy_keys , secret_variables , group_secret_variables and so on. Those config sections are processed by the code in the classes inheriting from the AbstractProcessor class. This class should be reused when implementing new functionalities (such as supporting new configuration keys) as it holds the common logic for skipping the configuration parts and running in dry-run mode. The processors have been grouped into two packages - group where the processors applied to the group settings are implemented and project - where processors executed on the project level are located. Since v2.2.0 there is a new way of implementing processors - by inheriting form MultipleEntitiesProcessor class. It should be applied for new features which manage 0-N entities of some kind under a group or a project. See BadgesProcessor as an example how to use it. Since v2.10.0 we have a similar solution for features where you manage a single entity - SingleEntityProcessor class. See ProjectPushRulesProcessor as an example how to use it.","title":"gitlabform. and gitlabform.processors."},{"location":"contrib/implementation_design/#usage","text":"If you want to add/change/fix things under an existing config section then most likely you will need to update the code in the processor classes (for example, in BranchesProcessor ). If you want to add support for a new config section (= completely new feature), then you need to: (TODO: expand this sections) Consider writing a new processor using MultipleEntitiesProcessor class as a base. Create a new class group_<new_config_section_name>_processor (if it applies to the group settings) or <new_config_section_name>_processor (if it applies to project settings) and implement two methods: _process_configuration - which does the actual processing by calling the API and applying the changes in GitLab; _log_changes - which is optional but recommended to implement; by calling this method the effective changes to be applied should be logged (when running in dry-run mode). Add the new processor to GroupProcessors in group > __init__.py (if group settings processor was created) or to ProjectProcessors in project > __init__.py .","title":"Usage"},{"location":"contrib/implementation_design/#gitlabformgitlab","text":"With the basics for making requests to the GitLab API covered in the GitLabCore class in core.py , all other code is simple (most of the time). Almost all methods in other classes end up calling self._make_requests_to_api , which takes care of making the HTTP GitLab API requests with proper authentication, pagination, retries, timeouts and more. Sometimes there is some logic in these methods if: we only need a specific part of the response from GitLab API - see GitLabProjects.get_all_projects() as an example, some GitLab APIs need some workarounds for their bugs or documentation inconsistencies, like: some APIs declare in the docs that they accept both \"group/project\" string OR a project id while in fact only the latter works - see GitLabProjects.post_approvals() as an example, some APIs return invalid HTTP error codes, like 404 instead of 400 - see GitLabGroupLDAPLinks.add_ldap_group_link as an example. Note : Some of the code here is NOT used by the GitLabForm app , but utilized by internal Egnyte applications that have not yet switched to the more standard python-gitlab .","title":"gitlabform.gitlab.*"},{"location":"contrib/implementation_design/#usage_1","text":"If you want to add/change/fix code that operates on an existing GitLab API you should look around the \"feature\" classes in this package (for example GitLabMergeRequests in merge_requests.py ). If you want to add code that operates on the new GitLab API you should: create a new new_gitlab_api_name.py file in gitlabform.gitlab and define a \"feature\" class there that inherits GitLabCore (for example: GitLabApiName ). add the new feature class to the list of classes inherited by the \"everything\" GitLab class defined in __init__.py .","title":"Usage"},{"location":"contrib/implementation_design/#gitlabformconfiguration","text":"TODO : describe this part. Especially what an \"effective project config\" is, because that may not be clear.","title":"gitlabform.configuration.*"},{"location":"contrib/introduction/","text":"All contributions are welcome! ask questions, report issues, ask for features or write anything message to the app authors - use Issues for all of these, contribute to the documentation and example configuration - with Pull Requests , contribute your bug fixes, new features, refactoring and other code improvements - with Pull Requests , ...and probably more! If you want to help in any way but don't know how - create an Issue . Issues \u00b6 As the project is not (yet ;) flooded with issues the guidelines for creating them are not very strict and should be very common sense ones. Questions \u00b6 Before asking a question please make sure that you have read the docs, especially the example config.yml . Problems \u00b6 Before reporting a problem please update GitLabForm to the latest version and check if the issue persists. If it does then please try to report what environment you have, what you try to do, what you expect to happen and what does in fact happen. To be more specific please remember to: provide GitLab version, provide GitLabForm version, provide your Python version and Operating System, provide config in whole, or a relevant fragment (of course you can and should redact any values you need to redact for privacy and security reasons), Feature requests \u00b6 Please note that although we do accept feature requests we do not promise to fulfill them. However, it's still worth creating an issue for this as it shows interest in given feature and that may be taken into account by both existing app authors and new contributors when planning to implement something new.","title":"Introduction"},{"location":"contrib/introduction/#issues","text":"As the project is not (yet ;) flooded with issues the guidelines for creating them are not very strict and should be very common sense ones.","title":"Issues"},{"location":"contrib/introduction/#questions","text":"Before asking a question please make sure that you have read the docs, especially the example config.yml .","title":"Questions"},{"location":"contrib/introduction/#problems","text":"Before reporting a problem please update GitLabForm to the latest version and check if the issue persists. If it does then please try to report what environment you have, what you try to do, what you expect to happen and what does in fact happen. To be more specific please remember to: provide GitLab version, provide GitLabForm version, provide your Python version and Operating System, provide config in whole, or a relevant fragment (of course you can and should redact any values you need to redact for privacy and security reasons),","title":"Problems"},{"location":"contrib/introduction/#feature-requests","text":"Please note that although we do accept feature requests we do not promise to fulfill them. However, it's still worth creating an issue for this as it shows interest in given feature and that may be taken into account by both existing app authors and new contributors when planning to implement something new.","title":"Feature requests"},{"location":"contrib/local_development/","text":"Local Development \u00b6 Development environment setup \u00b6 Create virtualenv with Python 3, for example in venv dir which is in .gitignore and activate it: virtualenv -p python3 venv . venv/bin/activate Install GitLabForm in develop mode: python setup.py develop Now you can run and debug the app locally. Running unit tests \u00b6 GitLabForm uses py.test for tests. You can run unit tests directly on your machine or in a Docker container. Running unit tests locally \u00b6 To run unit tests locally: Activate the virtualenv created above Install the dependencies for tests: pip install -e .[test] Run pytest tests/unit to run all the unit tests. Running unit tests in a Docker container \u00b6 If you have a problem with installing the test dependencies on your localhost, you can run the tests in Docker container too, like this: Build the image: docker build . -f ./dev/tests.Dockerfile -t gitlabform-tests:latest Use it to run the tests: docker run -it -v $(pwd):/code gitlabform-tests:latest /bin/ash -c \"cd /code && pytest tests/acceptance\" Running acceptance tests \u00b6 Most GitLabForm test are the ones that make real operations on a running GitLab instance. You can run them against a disposable GitLab instance running as a Docker container OR use your own GitLab instance. Running acceptance tests using GitLab instance in Docker \u00b6 (optional) If you have it, put your GitLab license into the Gitlab.gitlab-license file. According to the license agreement (as of now and IANAL) you are allowed to use it for testing and development purposes such as this. This will make the following script use it to be able to test Premium (paid) features. Of course this license will not leave your machine. Run below commands to start GitLab in a container. Note that it may take a few minutes! ./dev/run_gitlab_in_docker.sh Run pytest tests/acceptance to start all tests. To run only a single class with tests run f.e. py.test tests/acceptance -k \"TestArchiveProject\" . Running acceptance tests using your own GitLab instance \u00b6 Note : GitLabForm acceptance tests operate own their own groups, projects and users and it should be safe to run them on any GitLab instance. However we do not take any responsibility for it. Please review the code to ensure what it does and run it at your own risk! Get an admin user API token and put it into GITLAB_TOKEN env variable. Do the same with your GitLab instance URL and GITLAB_URL : export GITLAB_URL=\"https://mygitlab.company.com\" export GITLAB_TOKEN=\"<my admin user API token>\" Run pytest tests/acceptance to start all tests To run only a single class with tests run f.e. py.test tests/acceptance -k \"TestArchiveProject\" . Publish docs locally \u00b6 . venv/bin/activate pip install -e mkdocs server","title":"Local Development"},{"location":"contrib/local_development/#local-development","text":"","title":"Local Development"},{"location":"contrib/local_development/#development-environment-setup","text":"Create virtualenv with Python 3, for example in venv dir which is in .gitignore and activate it: virtualenv -p python3 venv . venv/bin/activate Install GitLabForm in develop mode: python setup.py develop Now you can run and debug the app locally.","title":"Development environment setup"},{"location":"contrib/local_development/#running-unit-tests","text":"GitLabForm uses py.test for tests. You can run unit tests directly on your machine or in a Docker container.","title":"Running unit tests"},{"location":"contrib/local_development/#running-unit-tests-locally","text":"To run unit tests locally: Activate the virtualenv created above Install the dependencies for tests: pip install -e .[test] Run pytest tests/unit to run all the unit tests.","title":"Running unit tests locally"},{"location":"contrib/local_development/#running-unit-tests-in-a-docker-container","text":"If you have a problem with installing the test dependencies on your localhost, you can run the tests in Docker container too, like this: Build the image: docker build . -f ./dev/tests.Dockerfile -t gitlabform-tests:latest Use it to run the tests: docker run -it -v $(pwd):/code gitlabform-tests:latest /bin/ash -c \"cd /code && pytest tests/acceptance\"","title":"Running unit tests in a Docker container"},{"location":"contrib/local_development/#running-acceptance-tests","text":"Most GitLabForm test are the ones that make real operations on a running GitLab instance. You can run them against a disposable GitLab instance running as a Docker container OR use your own GitLab instance.","title":"Running acceptance tests"},{"location":"contrib/local_development/#running-acceptance-tests-using-gitlab-instance-in-docker","text":"(optional) If you have it, put your GitLab license into the Gitlab.gitlab-license file. According to the license agreement (as of now and IANAL) you are allowed to use it for testing and development purposes such as this. This will make the following script use it to be able to test Premium (paid) features. Of course this license will not leave your machine. Run below commands to start GitLab in a container. Note that it may take a few minutes! ./dev/run_gitlab_in_docker.sh Run pytest tests/acceptance to start all tests. To run only a single class with tests run f.e. py.test tests/acceptance -k \"TestArchiveProject\" .","title":"Running acceptance tests using GitLab instance in Docker"},{"location":"contrib/local_development/#running-acceptance-tests-using-your-own-gitlab-instance","text":"Note : GitLabForm acceptance tests operate own their own groups, projects and users and it should be safe to run them on any GitLab instance. However we do not take any responsibility for it. Please review the code to ensure what it does and run it at your own risk! Get an admin user API token and put it into GITLAB_TOKEN env variable. Do the same with your GitLab instance URL and GITLAB_URL : export GITLAB_URL=\"https://mygitlab.company.com\" export GITLAB_TOKEN=\"<my admin user API token>\" Run pytest tests/acceptance to start all tests To run only a single class with tests run f.e. py.test tests/acceptance -k \"TestArchiveProject\" .","title":"Running acceptance tests using your own GitLab instance"},{"location":"contrib/local_development/#publish-docs-locally","text":". venv/bin/activate pip install -e mkdocs server","title":"Publish docs locally"},{"location":"contrib/releases/","text":"Releases \u00b6 Versioning \u00b6 We try to follow the PEP 440 versioning scheme, which is mostly based on semantic versioning . Procedure \u00b6 Add an entry in CHANGELOG.md . Remember to give thanks to all the contributors! Use tbump to bump the version. Edit the release in GitHub. Copy the changelog entry into its description","title":"Releases"},{"location":"contrib/releases/#releases","text":"","title":"Releases"},{"location":"contrib/releases/#versioning","text":"We try to follow the PEP 440 versioning scheme, which is mostly based on semantic versioning .","title":"Versioning"},{"location":"contrib/releases/#procedure","text":"Add an entry in CHANGELOG.md . Remember to give thanks to all the contributors! Use tbump to bump the version. Edit the release in GitHub. Copy the changelog entry into its description","title":"Procedure"},{"location":"reference/ci_cd_variables/","text":"CI/CD variables \u00b6 Please note that project-level and group-level CI/CD variables (used to be known as \"Secret Variables\") are different entities in GitLab! Project CI/CD variables \u00b6 This section purpose is to manage the project-level CI/CD variables. The keys and values for each variable should be as documented in the Project-Level Variables API docs , except the id . You can make the: protected variables masked variables variables limited to the scope of specific environment(s) Info Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) Example: projects_and_groups : group_1/project_1 : secret_variables : # --- Adding/resetting a_friendly_secret_variable_name : # this is just a label key : SSH_PRIVATE_KEY_BASE64 value : \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUl (...)\" # --- Adding/resetting protected variable my_protected_variable : key : PROTECTED_VAR value : \"foobar-123-123-123\" protected : true # --- Adding/resetting masked variable my_masked_variable : key : MASKED_VAR value : \"foobar-123-123-123\" masked : true # --- Adding/resetting variables per environment aws_access_key_id_for_deploying_in_production : key : APP_HOST_AWS_ACCESS_KEY_ID value : \"prod-value-1234\" protected : true masked : true environment_scope : production filter[environment_scope] : production aws_access_key_id_for_deploying_in_staging : key : APP_HOST_AWS_ACCESS_KEY_ID value : \"staging-value-1234\" protected : true masked : true environment_scope : staging filter[environment_scope] : staging # --- Deleting # the below name is not used by GitLab, it's just for you a_secret_you_want_to_remove : key : MY_SECRET delete : true Group CI/CD variables \u00b6 This section purpose is to manage the group-level CI/CD variables. The keys and values for each variable should be as documented in the Group-Level Variables API docs , except the id . Although we do not provide examples like for the project-level variables, all the features like above are also supported: protected variables, masked variables, variables limited to the scope of specific environment(s). Info Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) Example: projects_and_groups : group_1/* : group_secret_variables : # --- Adding/resetting a_secret_you_want_to_add_to_all_groups_in_your_gitlab_instance : # this is just a label key : A_NEW_PASSWORD value : \"ThisIsAVerySecretPassword\" variable_type : env_var # or file protected : false # --- Deleting old_variable : key : PASSWORD delete : true","title":"CI/CD Variables"},{"location":"reference/ci_cd_variables/#cicd-variables","text":"Please note that project-level and group-level CI/CD variables (used to be known as \"Secret Variables\") are different entities in GitLab!","title":"CI/CD variables"},{"location":"reference/ci_cd_variables/#project-cicd-variables","text":"This section purpose is to manage the project-level CI/CD variables. The keys and values for each variable should be as documented in the Project-Level Variables API docs , except the id . You can make the: protected variables masked variables variables limited to the scope of specific environment(s) Info Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) Example: projects_and_groups : group_1/project_1 : secret_variables : # --- Adding/resetting a_friendly_secret_variable_name : # this is just a label key : SSH_PRIVATE_KEY_BASE64 value : \"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUl (...)\" # --- Adding/resetting protected variable my_protected_variable : key : PROTECTED_VAR value : \"foobar-123-123-123\" protected : true # --- Adding/resetting masked variable my_masked_variable : key : MASKED_VAR value : \"foobar-123-123-123\" masked : true # --- Adding/resetting variables per environment aws_access_key_id_for_deploying_in_production : key : APP_HOST_AWS_ACCESS_KEY_ID value : \"prod-value-1234\" protected : true masked : true environment_scope : production filter[environment_scope] : production aws_access_key_id_for_deploying_in_staging : key : APP_HOST_AWS_ACCESS_KEY_ID value : \"staging-value-1234\" protected : true masked : true environment_scope : staging filter[environment_scope] : staging # --- Deleting # the below name is not used by GitLab, it's just for you a_secret_you_want_to_remove : key : MY_SECRET delete : true","title":"Project CI/CD variables"},{"location":"reference/ci_cd_variables/#group-cicd-variables","text":"This section purpose is to manage the group-level CI/CD variables. The keys and values for each variable should be as documented in the Group-Level Variables API docs , except the id . Although we do not provide examples like for the project-level variables, all the features like above are also supported: protected variables, masked variables, variables limited to the scope of specific environment(s). Info Variables limited to the scope of specific environment(s) requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) Example: projects_and_groups : group_1/* : group_secret_variables : # --- Adding/resetting a_secret_you_want_to_add_to_all_groups_in_your_gitlab_instance : # this is just a label key : A_NEW_PASSWORD value : \"ThisIsAVerySecretPassword\" variable_type : env_var # or file protected : false # --- Deleting old_variable : key : PASSWORD delete : true","title":"Group CI/CD variables"},{"location":"reference/deploy_keys/","text":"Deploy keys \u00b6 Project deploy keys \u00b6 This section purpose is to manage project deploy keys . The keys and values for each deploy key should be as documented in the Deploy keys API docs , except the id . Notes: you have to always provide the whole SSH key under the key . This is a limitation of the GitLab API. You can see an example of this here in the docs . you can set the value of can_push only on the first assignment of the key or its creation. This is a limitation of the GitLab API. See this issue and comment for more information. Example: projects_and_groups : group_1/project_1 : deploy_keys : # --- Adding/resetting a_friendly_deploy_key_name : # this is just a label key : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL (...)\" title : ssh_key_name_that_is_shown_in_gitlab can_push : false another_friendly_deploy_key_name : key : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg (...)\" title : other_ssh_key_name_that_is_shown_in_gitlab can_push : true # --- Deleting ensure_to_remove_this_one : title : different_key_title delete : true","title":"Deploy Keys"},{"location":"reference/deploy_keys/#deploy-keys","text":"","title":"Deploy keys"},{"location":"reference/deploy_keys/#project-deploy-keys","text":"This section purpose is to manage project deploy keys . The keys and values for each deploy key should be as documented in the Deploy keys API docs , except the id . Notes: you have to always provide the whole SSH key under the key . This is a limitation of the GitLab API. You can see an example of this here in the docs . you can set the value of can_push only on the first assignment of the key or its creation. This is a limitation of the GitLab API. See this issue and comment for more information. Example: projects_and_groups : group_1/project_1 : deploy_keys : # --- Adding/resetting a_friendly_deploy_key_name : # this is just a label key : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDB2QKx6BPzL (...)\" title : ssh_key_name_that_is_shown_in_gitlab can_push : false another_friendly_deploy_key_name : key : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDtbyEK66RXg (...)\" title : other_ssh_key_name_that_is_shown_in_gitlab can_push : true # --- Deleting ensure_to_remove_this_one : title : different_key_title delete : true","title":"Project deploy keys"},{"location":"reference/merge_requests/","text":"Merge Requests \u00b6 Info This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) This section purpose is to manage the Merge Requests settings. The settings under the approvals key are as documented at GitLab's Merge Request approvals API . The approvers and approver_groups are both optional. If any of these are set, GitLabForm starts to manage an approval rule named \"Approvers (configured using GitLabForm)\". Under the approvers there should be an array of usernames, under the approver_groups - array of group/subgroup paths. The remove_other_approval_rules key is optional and if it is set to true then any other approval rules that might exist in the project, other than the one mentioned above, will be deleted. Note Some Merge Requests-related settings are also set in the project settings . Example: projects_and_groups : group_1/project_1 : merge_requests : approvals : approvals_before_merge : 2 reset_approvals_on_push : true disable_overriding_approvers_per_merge_request : true approvers : - user1 - user2 approver_groups : - my-group - my-group1/subgroup - my-group2/subgroup/subsubgroup remove_other_approval_rules : false","title":"Merge Requests"},{"location":"reference/merge_requests/#merge-requests","text":"Info This section requires GitLab Premium (paid). (This is a GitLab's limitation, not GitLabForm's.) This section purpose is to manage the Merge Requests settings. The settings under the approvals key are as documented at GitLab's Merge Request approvals API . The approvers and approver_groups are both optional. If any of these are set, GitLabForm starts to manage an approval rule named \"Approvers (configured using GitLabForm)\". Under the approvers there should be an array of usernames, under the approver_groups - array of group/subgroup paths. The remove_other_approval_rules key is optional and if it is set to true then any other approval rules that might exist in the project, other than the one mentioned above, will be deleted. Note Some Merge Requests-related settings are also set in the project settings . Example: projects_and_groups : group_1/project_1 : merge_requests : approvals : approvals_before_merge : 2 reset_approvals_on_push : true disable_overriding_approvers_per_merge_request : true approvers : - user1 - user2 approver_groups : - my-group - my-group1/subgroup - my-group2/subgroup/subsubgroup remove_other_approval_rules : false","title":"Merge Requests"},{"location":"reference/project_settings/","text":"Project Settings \u00b6 This section purpose is to manage the project settings . The settings should be as documented at GitLab's Project API docs , except the id . You can provide any number of the settings from there - if you don't provide a setting then it will be not changed. Note that some keys and values can be very complex here - see the Container Registry cleanup policies under the container_expiration_policy_attributes key in the code below as an example. Note Some [Merge Requests][merge_requests]-related settings are also set here. Example: projects_and_groups : group_1/project_1 : project_settings : default_branch : main builds_access_level : enabled visibility : internal only_allow_merge_if_pipeline_succeeds : true only_allow_merge_if_all_discussions_are_resolved : true container_expiration_policy_attributes : cadence : \"1month\" enabled : true keep_n : 1 older_than : \"14d\" name_regex : \"\" name_regex_delete : \".*\" name_regex_keep : \".*-main\" # (...)","title":"Project Settings"},{"location":"reference/project_settings/#project-settings","text":"This section purpose is to manage the project settings . The settings should be as documented at GitLab's Project API docs , except the id . You can provide any number of the settings from there - if you don't provide a setting then it will be not changed. Note that some keys and values can be very complex here - see the Container Registry cleanup policies under the container_expiration_policy_attributes key in the code below as an example. Note Some [Merge Requests][merge_requests]-related settings are also set here. Example: projects_and_groups : group_1/project_1 : project_settings : default_branch : main builds_access_level : enabled visibility : internal only_allow_merge_if_pipeline_succeeds : true only_allow_merge_if_all_discussions_are_resolved : true container_expiration_policy_attributes : cadence : \"1month\" enabled : true keep_n : 1 older_than : \"14d\" name_regex : \"\" name_regex_delete : \".*\" name_regex_keep : \".*-main\" # (...)","title":"Project Settings"}]}